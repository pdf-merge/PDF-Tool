name: "Intelligent Book Downloader"
on:
  workflow_dispatch:
    inputs:
      BOOK_ID:
        description: "BOOK_ID to download"
        required: true
        default: "1"
      THREADS:
        description: "Số luồng tải ảnh đồng thời (max threads)"
        required: true
        default: "512"
      PERFORM_OCR:
        description: "Thực hiện OCR (nhận dạng chữ) cho file PDF?"
        required: true
        default: "yes"
        type: choice
        options:
          - "yes"
          - "no"
env:
  TZ: Asia/Ho_Chi_Minh
jobs:
  download:
    runs-on: ubuntu-22.04
    timeout-minutes: 720
    env:
      BOOK_ID: ${{ github.event.inputs.BOOK_ID }}
      THREADS: ${{ github.event.inputs.THREADS }}
      PERFORM_OCR: ${{ github.event.inputs.PERFORM_OCR }}
      PYTHONPATH: ${{ github.workspace }}
      RCLONE_DEST_DEFAULT: ${{ '1drive:/LSC_Books' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: 'proplayer1131/sachyhocpdf_downloader-main'
          token: ${{ secrets.ACTION_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          
      - name: Select Account Sequentially
        id: select_account
        env:
          ACCOUNTS_SECRET: ${{ secrets.BHLNK_ACCOUNTS }}
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          ACCOUNTS_LIST=$(echo "${ACCOUNTS_SECRET}" | sed '/^\s*$/d')
          TOTAL_ACCOUNTS=$(echo "${ACCOUNTS_LIST}" | wc -l)
          ACCOUNT_INDEX=$(( (RUN_NUMBER - 1) % TOTAL_ACCOUNTS ))
          LINE_NUM=$((ACCOUNT_INDEX + 1))
          ACCOUNT_LINE=$(echo "${ACCOUNTS_LIST}" | awk "NR==${LINE_NUM}")
          BHLNK_EMAIL_VALUE=$(echo "$ACCOUNT_LINE" | cut -d: -f1)
          BHLNK_PASSWORD_VALUE=$(echo "$ACCOUNT_LINE" | cut -d: -f2-)
          echo "::add-mask::$BHLNK_EMAIL_VALUE"
          echo "::add-mask::$BHLNK_PASSWORD_VALUE"
          echo "BHLNK_EMAIL=${BHLNK_EMAIL_VALUE}" >> $GITHUB_ENV
          echo "BHLNK_PASSWORD=${BHLNK_PASSWORD_VALUE}" >> $GITHUB_ENV
          
      - name: Install Base Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git python3-tk jq exiftool \
            ghostscript qpdf \
            libopenjp2-7 libffi-dev libssl-dev
            
          python -m pip install -U pip
          pip install requests Pillow psutil
          if [ -f requirements.txt ]; then
            grep -v -E 'tkinter|pywin32|win32mica|upx|customtkinter|futures|tqdm' requirements.txt > requirements_linux.txt
            pip install -r requirements_linux.txt
          fi
          
      - name: Install OCR Dependencies (Conditional)
        if: env.PERFORM_OCR == 'yes'
        run: |
          echo "Installing OCR dependencies..."
          sudo apt-get install -y \
            tesseract-ocr tesseract-ocr-vie tesseract-ocr-eng
          
          git clone https://github.com/ocrmypdf/OCRmyPDF.git
          cd OCRmyPDF
          pip install .
          cd ..
          echo "OCR dependencies installed."
          
      - name: Configure Rclone
        env:
          RCLONE_CONF_CONTENTS: ${{ secrets.RCLONE_CONF }}
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf "%s" "$RCLONE_CONF_CONTENTS" > ~/.config/rclone/rclone.conf
          
      - name: Run Intelligent Download Script
        id: download_script
        run: python -u scripts/download_one.py
        
      - name: Read Download Status
        id: status_reader
        if: always()
        run: |
          if [ -f "download_status.txt" ]; then
            STATUS=$(cat download_status.txt)
            echo "DOWNLOAD_STATUS=$STATUS" >> $GITHUB_OUTPUT
          else
            echo "DOWNLOAD_STATUS=SCRIPT_ERROR" >> $GITHUB_OUTPUT
          fi
        shell: bash
        
      - name: Sanitize Folder Name
        id: sanitize
        if: hashFiles('folder_name.txt') != ''
        run: |
          ORIGINAL_NAME=$(cat folder_name.txt)
          SANITIZED_NAME=$(echo "$ORIGINAL_NAME" | sed 's#[*:<>?\/\\|]#_#g')
          if [ "$ORIGINAL_NAME" != "$SANITIZED_NAME" ]; then
            mv -- "$ORIGINAL_NAME" "$SANITIZED_NAME"
          fi
          echo "sanitized_name=$SANITIZED_NAME" >> $GITHUB_OUTPUT
          
      - name: Set Upload Destination
        id: set_destination
        if: steps.status_reader.outputs.DOWNLOAD_STATUS != 'EXISTS' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'SCRIPT_ERROR' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'NOT_FOUND' && steps.sanitize.outputs.sanitized_name != ''
        run: |
          if [[ "${{ env.PERFORM_OCR }}" == "yes" ]]; then
            echo "RCLONE_DEST_PATH=1drive:/LSC_Books_OCR" >> $GITHUB_ENV
            echo "Upload destination set to OCR folder."
          else
            echo "RCLONE_DEST_PATH=${{ env.RCLONE_DEST_DEFAULT }}" >> $GITHUB_ENV
            echo "Upload destination set to standard folder."
          fi
          
      - name: Run OCRmyPDF (Conditional)
        id: ocr
        if: steps.status_reader.outputs.DOWNLOAD_STATUS != 'EXISTS' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'SCRIPT_ERROR' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'NOT_FOUND' && steps.sanitize.outputs.sanitized_name != '' && env.PERFORM_OCR == 'yes'
        run: |
          FOLDER_NAME="${{ steps.sanitize.outputs.sanitized_name }}"
          echo "Entering directory for OCR: $FOLDER_NAME"
          cd "$FOLDER_NAME"
          
          echo "Finding PDF files for OCR..."
          find . -name "*.pdf" -print0 | while IFS= read -r -d '' pdf_file; do
            echo "---"
            echo "Processing OCR on: $pdf_file"
            TEMP_OCR_FILE="ocr_temp_file.pdf"
            
            ocrmypdf \
              --language "vie+eng" \
              --skip-text \
              "$pdf_file" \
              "$TEMP_OCR_FILE"
            
            if [ $? -eq 0 ]; then
              echo "OCR successful. Overwriting original file: $pdf_file"
              mv "$TEMP_OCR_FILE" "$pdf_file"
            else
              echo "::warning::OCR failed on $pdf_file. Skipping this file."
              rm -f "$TEMP_OCR_FILE"
            fi
            echo "---"
          done
          
          echo "OCR processing complete."
          
      - name: 'Force PDF Metadata (All Files)'
        id: metadata_individual
        if: steps.status_reader.outputs.DOWNLOAD_STATUS != 'EXISTS' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'SCRIPT_ERROR' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'NOT_FOUND' && steps.sanitize.outputs.sanitized_name != ''
        run: |
          FOLDER_NAME="${{ steps.sanitize.outputs.sanitized_name }}"
          echo "Entering directory to apply metadata: $FOLDER_NAME"
          cd "$FOLDER_NAME"
          
          echo "Finding PDF files to update metadata..."
          find . -name "*.pdf" -print0 | while IFS= read -r -d '' pdf_file; do
            echo "Applying LSC metadata to: $pdf_file"
            
            exiftool -Title="LSC" \
                     -Author="LSC" \
                     -Subject="LSC" \
                     -Creator="LSC" \
                     -Producer="LSC" \
                     -overwrite_original \
                     "$pdf_file"
            
            if [ $? -eq 0 ]; then
              echo "Metadata update successful for: $pdf_file"
            else
              echo "::warning::Metadata update failed for: $pdf_file"
            fi
          done
          
          echo "Metadata processing complete."

      - name: 'Upload Book Folder'
        if: steps.status_reader.outputs.DOWNLOAD_STATUS != 'EXISTS' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'SCRIPT_ERROR' && steps.status_reader.outputs.DOWNLOAD_STATUS != 'NOT_FOUND' && steps.sanitize.outputs.sanitized_name != ''
        run: |
          FOLDER_NAME="${{ steps.sanitize.outputs.sanitized_name }}"
          TARGET="${{ env.RCLONE_DEST_PATH }}/${FOLDER_NAME}"
          
          echo "Uploading $FOLDER_NAME to $TARGET"
          rclone copy "${FOLDER_NAME}" "${TARGET}" --transfers=8 --checkers=16 --progress
        shell: bash
        
      - name: Upload Result Message
        if: success() && hashFiles('telegram_message.txt') != ''
        uses: actions/upload-artifact@v4
        with:
          name: result-message-${{ github.run_id }}
          path: telegram_message.txt
          retention-days: 1
