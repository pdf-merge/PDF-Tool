  name: Rclone

on:
  workflow_dispatch:
    inputs:
      file_url:
        description: 'File URL (GDrive, OneDrive, or Direct Link)'
        required: true
      
      remote_name:
        description: 'Select remote (gdrive or 1drive)'
        required: true
        type: choice
        options:
          - gdrive
          - 1drive
        default: 'gdrive'

jobs:
  mirror-file:
    runs-on: ubuntu-latest
    steps:
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        env:
          RCLONE_CONF_BASE64: ${{ secrets.RCLONE_CONF_BASE64 }}
        run: |
          echo "Configuring rclone..."
          mkdir -p ~/.config/rclone
          echo $RCLONE_CONF_BASE64 | base64 -d > ~/.config/rclone/rclone.conf
          echo "Rclone configuration complete."

      - name: Install gdown
        run: |
          echo "Installing gdown..."
          pip install gdown
          echo "gdown installed."

      - name: Download File (using gdown)
        id: download
        run: |
          URL="${{ github.event.inputs.file_url }}"
          
          echo "Downloading file with gdown (handles GDrive/OneDrive)..."
          
          GDOWN_LOG=$(gdown --fuzzy "$URL" 2>&1)
          
          echo "$GDOWN_LOG"
          
          LOCAL_FILE=$(echo "$GDOWN_LOG" | grep -oP "(?<=To: |Saved to: |Downloading to: ).*")
          
          LOCAL_FILE=$(echo $LOCAL_FILE)
          
          LOCAL_FILE=${LOCAL_FILE//\'/}
          
          if [ -z "$LOCAL_FILE" ]; then
            echo "ERROR: Could not download file or determine filename from gdown output."
            echo "Check link or gdown log. The file might be private."
            exit 1
          fi

          echo "File downloaded successfully as: $LOCAL_FILE"
          echo "local_file=$LOCAL_FILE" >> $GITHUB_OUTPUT

      - name: Upload File (to Mirror directory)
        id: upload
        run: |
          LOCAL_FILE="${{ steps.download.outputs.local_file }}"
          REMOTE_NAME="${{ github.event.inputs.remote_name }}"
          REMOTE_PATH="${REMOTE_NAME}:Mirror"

          echo "Uploading '$LOCAL_FILE' to '$REMOTE_PATH'"
          rclone copy "$LOCAL_FILE" "$REMOTE_PATH" -P --config ~/.config/rclone/rclone.conf
          echo "remote_path=$REMOTE_PATH" >> $GITHUB_OUTPUT
          echo "Upload complete."

      - name: Get Share Link
        id: get_link
        run: |
          LOCAL_FILE="${{ steps.download.outputs.local_file }}"
          REMOTE_PATH="${{ steps.upload.outputs.remote_path }}"
          echo "Getting link for: ${REMOTE_PATH}/${LOCAL_FILE}"
          
          FILE_LINK=$(rclone link "${REMOTE_PATH}/${LOCAL_FILE}" --config ~/.config/rclone/rclone.conf)
          
          if [ -z "$FILE_LINK" ]; then
            FILE_LINK="Could not get link (check sharing settings)"
          fi
          echo "file_link=$FILE_LINK" >> $GITHUB_OUTPUT

      - name: Send Telegram Notification
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          FILE_NAME: ${{ steps.download.outputs.local_file }}
          REMOTE_NAME: ${{ github.event.inputs.remote_name }}
          FILE_LINK: ${{ steps.get_link.outputs.file_link }}
        run: |
          echo "Preparing Telegram message..."
          
          escape_html() {
            echo "$1" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g'
          }

          FILE_NAME_HTML=$(escape_html "$FILE_NAME")
          REMOTE_NAME_HTML=$(escape_html "$REMOTE_NAME")
          FILE_LINK_HTML=$(escape_html "$FILE_LINK")

          MESSAGE_TEXT="âœ… <b>Upload Complete</b>
          
          <b>File</b>: <code>$FILE_NAME_HTML</code>
          <b>Destination</b>: <code>${REMOTE_NAME_HTML}:Mirror</code>
          <b>Link</b>: <code>$FILE_LINK_HTML</code>"

          JSON_PAYLOAD=$(jq -n \
                            --arg chat_id "$TELEGRAM_CHAT_ID" \
                            --arg text "$MESSAGE_TEXT" \
                            '{chat_id: $chat_id, text: $text, parse_mode: "HTML"}')
          
          echo "Sending notification via POST..."
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
               -H "Content-Type: application/json" \
               -d "$JSON_PAYLOAD"
          
          echo "Notification sent."

      - name: Clean up runner
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -f "${{ steps.download.outputs.local_file }}"
          echo "Cleanup complete."
